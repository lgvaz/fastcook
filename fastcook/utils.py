# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_utils.ipynb (unless otherwise specified).

__all__ = ['synth_learner']

# Cell
from fastai2.basics import *
from torch.utils.data import TensorDataset

# Cell
def _synth_dbunch(a=2, b=3, bs=16, n_train=10, n_valid=2, cuda=False):
    def get_data(n):
        x = torch.randn(int(bs*n))
        return TensorDataset(x, a*x + b + 0.1*torch.randn(int(bs*n)))
    train_ds = get_data(n_train)
    valid_ds = get_data(n_valid)
    device = default_device() if cuda else None
    train_dl = TfmdDL(train_ds, bs=bs, shuffle=True, num_workers=0)
    valid_dl = TfmdDL(valid_ds, bs=bs, num_workers=0)
    return DataLoaders(train_dl, valid_dl, device=device)

# Cell
class _RegModel(Module):
    def __init__(self): self.a,self.b = nn.Parameter(torch.randn(1)),nn.Parameter(torch.randn(1))
    def forward(self, x): return x*self.a + self.b

# Cell
def synth_learner(n_train=10, n_valid=2, cuda=False, loss_func=None, lr=defaults.lr, **kwargs):
    data = _synth_dbunch(n_train=n_train,n_valid=n_valid, cuda=cuda)
    loss_func = loss_func or MSELossFlat()
    return Learner(data, _RegModel(), loss_func=loss_func, lr=lr, **kwargs)